version: 2.1

orbs:
  node: circleci/node@4.1.0

jobs:
  rspec:
    working_directory: ~/rails_booking_system

    docker:
      - image: ruby:2.7.1

      - image: cimg/postgres:14.0
        environment:
          POSTGRES_USER: "booking-system-user"
          POSTGRES_PASSWORD: ''
          POSTGRES_DB: "rails-booking-system-test"

    environment:
      RAILS_ENV: test

    steps:
      - checkout
      - node/install

      - run: |
          rm -rf ~/.yarn
          curl -o- -L https://yarnpkg.com/install.sh | bash
          export PATH="$HOME/.yarn/bin:$PATH"
          yarn config set prefix ~/.yarn -g
          echo 'export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"' >> $BASH_ENV

      - run:
          name: Install Dependencies
          command: |
            gem install bundler
            bundle install --jobs=3 --retry=3

      - run:
          name: Set Up Database and Run RSpec Tests
          command: |
            bundle exec rails db:migrate

      - run:
          name: Precompile Assets
          command: |
            bundle exec rake assets:precompile

      - save_cache:
          key: my_project-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Run RSpec Tests
          command: |
            bundle exec rspec

  build:
    working_directory: ~/rails_booking_system

    docker:
      - image: docker:17.05.0-ce-git

    environment:
      RAILS_ENV: test

    steps:
      - checkout
      - setup_remote_docker

      # Installs PIP, Docker Compose, and AWS CLI
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            apk update && apk add curl curl-dev bash
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76

      # Login to AWS ECR
      - run:
          name: Authenticate to AWS ECR
          command: |
            login="$(aws ecr get-login)"
            ${login}

      # # Build Docker image
      - run:
          name: Build Docker image
          command: |
            docker-compose build

      # # Push Docker image to ECR
      - run:
          name: Push Docker image to ECR
          command: |
            docker tag railsbookingsystem_web:latest 003006742287.dkr.ecr.ap-southeast-1.amazonaws.com/rails-booking-system:latest
            docker push 003006742287.dkr.ecr.ap-southeast-1.amazonaws.com/rails-booking-system:latest

  deploy:
    docker:
      - image: docker:17.05.0-ce-git

    steps:
      - checkout
      - setup_remote_docker

      # Installs PIP, Docker Compose, and AWS CLI
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            apk update && apk add curl curl-dev bash
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76

      # Login to AWS ECR
      - run:
          name: Authenticate to AWS ECR
          command: |
            login="$(aws ecr get-login)"
            ${login}

      - run:
          name: Pull Docker image from ECR
          command: |
            docker pull 003006742287.dkr.ecr.ap-southeast-1.amazonaws.com/rails-booking-system:latest

      - run:
          name: Deploy using CodeDeploy
          command: |
            # Below is just an example of how we can call AWS CodeDeploy to deploy our app
            # aws deploy create-deployment --application-name rails_booking_system --deployment-group-name rails_booking_system_deployment+group --revision revisionType=AppSpecContent,appSpecContent={content="<path-to-appspec-file>"}

workflows:
  build-test-and-deploy:
    jobs:
      - rspec
      - build:
          requires:
            - rspec
      - deploy:
          requires:
            - build